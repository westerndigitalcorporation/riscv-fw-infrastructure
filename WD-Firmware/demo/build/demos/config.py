#/* 
#* SPDX-License-Identifier: Apache-2.0
#* Copyright 2019 Western Digital Corporation or its affiliates.
#* 
#* Licensed under the Apache License, Version 2.0 (the "License");
#* you may not use this file except in compliance with the License.
#* You may obtain a copy of the License at
#* 
#* http:*www.apache.org/licenses/LICENSE-2.0
#* 
#* Unless required by applicable law or agreed to in writing, software
#* distributed under the License is distributed on an "AS IS" BASIS,
#* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#* See the License for the specific language governing permissions and
#* limitations under the License.
#*/

import os
import importlib

STR_DEMOS_FOLDER = "demos"
STR_DEMO_MODULE = "demos.demo_"
STR_DEMO_CLASS = "demo"
STR_NEW_LINE = "\n"
STR_COMMENT = "#"
STR_CONFIG_FILE = "configure.txt"
STR_DEMO_MODULE_PREFIX = "demo_"
STR_DEMO_MODULE_SUFFIX = ".py"
STR_CONFIG_HEADER = "##### This file is auto-generated by the build system. #####\n"
STR_CONFIG_HEADER += "#####                Please dont edit it manually.              #####\n"

class clsGenerate(object):
  def __init__(self):
    self.strDemo = ""
    self.listDemos = []
    self.intDemo = -1
    
  def setDemo(self):
    self.getConfigure()
    self.fnParseConfig()
    # if somehow the demo has not been set correctl break the build
    if not self.strDemo:
      print "No demo has been selected!"
      print "Please run the config.sh from the buil folder."
      exit(1)
    print "Setting Demo to => %s." % self.strDemo
    # import the demo class accordig to the configure 
    strModuleName = STR_DEMO_MODULE + self.strDemo
    mdlDemo = importlib.import_module(strModuleName)
    objClass = getattr(mdlDemo, STR_DEMO_CLASS)
    return mdlDemo.demo()
    
  def fnParseConfig(self):
    listLines = self.strDemo.split(STR_NEW_LINE)
    for strLine in listLines:
      if strLine.strip().startswith(STR_COMMENT):
        continue
      else:
        self.strDemo = strLine
        break
    
  def getConfigure(self):
    # if he configure file does not exist break the build
    if not os.path.isfile(STR_CONFIG_FILE):
      print "No configure file has been found!"
      print "Please run the config.sh from the build folder."
      exit(1)
    # read the configure file from he build folder and grab its info
    f = open(STR_CONFIG_FILE, "r")
    self.strDemo = f.read()
    f.close()
    
  def scanDemos(self):
    # scan the build/demo folder and grab all the files with pattern "demo_xxxx.py
    listFiles = os.listdir(os.path.join(os.getcwd(), "demos"))
    for strFile in listFiles:
      if strFile.startswith(STR_DEMO_MODULE_PREFIX) and strFile.endswith(STR_DEMO_MODULE_SUFFIX):
        self.listDemos.append(strFile.replace(STR_DEMO_MODULE_PREFIX, "").replace(STR_DEMO_MODULE_SUFFIX, "")) 
        
  def pickDemo(self):
    # list all the demos found in the build/demos folder and wait for the user to pick one
    for strFile in self.listDemos:
      print "%s: %s" % (self.listDemos.index(strFile), strFile)
    
    # @todo: get demo name from argument/argument file in the future
    while(True):
      strDemo = raw_input("Please select a demo:")
      if not strDemo.isdigit():
        print "Please enter the demo index!"
      elif int(strDemo) > (len(self.listDemos) - 1):
        print "Demo index out of range!"
      else:
        self.intDemo = int(strDemo)
        break
    
  def setConfig(self):
    # save the configureation in the configure file in the build folder
    self.scanDemos()
    self.pickDemo()
    strDemoName = self.listDemos[self.intDemo]
    f  = open(STR_CONFIG_FILE, "w")
    f.write(STR_CONFIG_HEADER + strDemoName)
    f.close()

if __name__ == "__main__":
  objConfigure= clsGenerate()
  objConfigure.setConfig()