'''
 SPDX-License-Identifier: Apache-2.0
 Copyright 2019 Western Digital Corporation or its affiliates.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
 http:www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
'''

# set imports and variables of sconstruct
import sys
import os
import time
import utils
from demos.config import clsGenerate


strLinkerScriptFile = "link.lds"
strStartHeader      = "\n-----------------------------------"
strEndHeader        = "-----------------------------------\n"
strBin              = 'bin'
strBsp              = 'bsp_'
strSconscriptPrefix = 'SConscript_'
listSupportedBoards = ['hifive1', 'hifive-un', 'nexys_a7_swerv1']
listDependencies    = ['libftdi1-2']

#### scons custom arguments ####
strTargetName = ARGUMENTS.get('target', '')
#downloadFlag = ARGUMENTS.get('download', '0')

# generate the demo factory and set the demo 
objFactory = clsGenerate()
objDemo = objFactory.setDemo()

# set the output files name for the demo
strMap_file, strElf_file, strDmp_file = utils.fnSetOutputFileNames(prefix=strTargetName)

#### scons verbose #####
verbose = True

utils.fnCheckInstalledDependencis(listDependencies)

# set global environment

# path to scons toolchain scripts
Env = Environment(toolpath = ['toolchain'])

# update TC path
utils.fnSetToolchainPath(objDemo.toolchain, Env)

#def download(target, source, env):
#   print repr(source)
#   return None

#Env['BUILDERS']['Download'] = Builder(action = download)

Env.Tool(os.path.join(objDemo.toolchain, 'as_rv'))
Env.Tool(os.path.join(objDemo.toolchain, 'cc_rv'))
Env.Tool(os.path.join(objDemo.toolchain, 'ar_rv'))

# set output file suffixes
Env['OBJSUFFIX']  = '.o'
Env['LIBSUFFIX']  = '.a'
Env['PROGSUFFIX'] = '.elf'

Env['ROOT_DIR']         = os.path.join(os.getcwd(),"..", "..")
Env['TARGET_LIBS']      = []
Env['RTOS_CORE']        = []
Env['PUBLIC_DEF']       = [] 
Env['PUBLIC_INC']       = [os.path.join(Env['ROOT_DIR'], 'common', 'api_inc'),]
Env['OUT_DIR_PATH']     = 'output'
Env['TARGET_BOARD']     = strTargetName
Env['DEMO_NAME']        = objDemo.strDemoName

Env['MAP_FILE'] = os.path.join(Env['OUT_DIR_PATH'], strMap_file)
Env['DMP_FILE'] = os.path.join(Env['OUT_DIR_PATH'], strDmp_file)
Env['ELF_FILE'] = os.path.join(Env['OUT_DIR_PATH'], strElf_file)

# get any toolchain specific options/flags
listSpecificCFlagsOptions, listSpecificLinkerOptions = utils.fnGetToolchainSpecificFlags(objDemo.toolchain, Env);

listCCOptions = ['-mabi=ilp32', '-g3', '-gdwarf-2', '-march=rv32imac', '-mcmodel=medlow'] + listSpecificCFlagsOptions + objDemo.listDemoSpecificCFlags
Env['C_FLAGS'] = ['-Os', '-ffunction-sections','-fdata-sections','-Wall','-c','-fno-builtin-printf','-include', 'sys/cdefs.h'] + listCCOptions
Env['A_FLAGS'] = ['-Wall', '-c', '-Wa,-march=rv32imac', '-x', 'assembler-with-cpp'] + listCCOptions

if verbose == False:
  # set output to minimal mode
  Env['CCCOMSTR']   = 'Compiling $SOURCES'
  Env['LINKCOMSTR'] = 'Linking $TARGET'
  Env['ASCOMSTR']   = 'Compiling $SOURCES'
  Env['ARCOMSTR']   = 'Archiving $TARGET'

# to solve long command line problems (in win32)
#SetupSpawn(Env)

# for debug
#print Env.Dump()

utils.fnCreateFolder(Env['OUT_DIR_PATH'])

# linker flags
Env['LINKFLAGS'] = ['-nostartfiles', '-static', '-nostdlib', '-Wl,--wrap=malloc', '-Wl,--wrap=free', '-Wl,--wrap=open', '-Wl,--wrap=lseek', 
                    '-Wl,--wrap=read', '-Wl,--wrap=write', '-Wl,--wrap=fstat', '-Wl,--wrap=stat', '-Wl,--wrap=close', 
                    '-Wl,--wrap=link', '-Wl,--wrap=unlink', '-Wl,--wrap=execve', '-Wl,--wrap=fork', '-Wl,--wrap=getpid', '-Wl,--wrap=kill', 
                    '-Wl,--wrap=wait', '-Wl,--wrap=isatty',  '-Wl,--wrap=times', '-Wl,--wrap=sbrk', '-Wl,--wrap=_exit', '-L.', 
                    '-Wl,--start-group', '-Wl,--end-group', '-Wl,-gc-sections', '-Wl,--start-group',
                    '-Wl,-Map='+ Env['MAP_FILE']] + listCCOptions + listSpecificLinkerOptions + objDemo.listDemoSpecificLinkerFlags

strBoardFolder = os.path.join(Env['ROOT_DIR'], 'board', Env['TARGET_BOARD'])
strLinkerScriptFile = os.path.join(strBoardFolder, strLinkerScriptFile)
Env['LINKFLAGS'] += ['-T', strLinkerScriptFile,'-L'+strBoardFolder]
#, LIBPATH='.'

if Env['TARGET_BOARD'] not in listSupportedBoards:
  print "missing target=%s" % " | ".join(listSupportedBoards)
  exit(1)

Env['PUBLIC_DEF'] = objDemo.public_defs
Env['TARGET_LIBS'] += ['c', 'gcc']

#prepare all Sconscripts for build
objDemo.listSconscripts.append(strBsp+ Env['TARGET_BOARD']) 

Env["Scan"] = True
for strSconscript in objDemo.listSconscripts:
  SConscript(strSconscriptPrefix +'%s' % strSconscript, exports='Env')
  
 
arrLibs = []
Env["Scan"] = False
# print all SConscripts build files
print strStartHeader
print "Building SConscripts files:\n\n-%s" % "\n-".join(objDemo.listSconscripts)
print strEndHeader
for strSconscript in objDemo.listSconscripts:
  arrLibs.append(SConscript(strSconscriptPrefix + '%s' % strSconscript, exports='Env'))

objBundle = Env.Program(Env['ELF_FILE'], arrLibs, LIBS=Env['TARGET_LIBS'])
# execute post build actions
AddPostAction(objBundle, Action(utils.fnProduceSectionsSize))
AddPostAction(objBundle, Action(utils.fnProduceDump))
AddPostAction(objBundle, Action(utils.fnMoveOverlaySection))

#append to the map file the   
#if downloadFlag != '0':
#  Env.Download(source=objBundle)
