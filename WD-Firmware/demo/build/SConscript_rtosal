'''
 SPDX-License-Identifier: Apache-2.0
 Copyright 2019 Western Digital Corporation or its affiliates.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
 http:www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
'''
import os
import utils
Import('Env')

strOutDir = os.path.join(Env['OUT_DIR_PATH'], 'rtosal')
utils.fnCreateFolder(strOutDir)

strRtosAlBase = os.path.join('rtos', 'rtosal')

# C language source and out files in list of tupples
# (sourcefile.c, outputfile.o)
listCFiles=[
   (os.path.join(strRtosAlBase, 'rtosal_event.c'), os.path.join(strOutDir, 'rtosal_event.o')),
   (os.path.join(strRtosAlBase, 'rtosal_util.c'), os.path.join(strOutDir, 'rtosal_util.o')),
   (os.path.join(strRtosAlBase, 'rtosal_mutex.c'), os.path.join(strOutDir, 'rtosal_mutex.o')),
   (os.path.join(strRtosAlBase, 'rtosal_queue.c'), os.path.join(strOutDir, 'rtosal_queue.o')),
   (os.path.join(strRtosAlBase, 'rtosal_semaphore.c'), os.path.join(strOutDir, 'rtosal_semaphore.o')),
   (os.path.join(strRtosAlBase, 'rtosal_task.c'), os.path.join(strOutDir, 'rtosal_task.o')),
   (os.path.join(strRtosAlBase, 'rtosal_time.c'), os.path.join(strOutDir, 'rtosal_time.o')),
   (os.path.join(strRtosAlBase, 'rtosal_error.c'), os.path.join(strOutDir, 'rtosal_error.o')),
   (os.path.join(strRtosAlBase, 'rtosal_interrupt.c'), os.path.join(strOutDir, 'rtosal_interrupt.o')),
]

# Assembly language source and out files in list of tupples
# (sourcefile.S, outputfile.o)
listAssemblyFiles=[
   (os.path.join(strRtosAlBase, 'rtosal_int_vect.S'), os.path.join(strOutDir, 'rtosal_int_vect.o')),
]

# compiler flags
listCCompilerDirectivs = [] + Env['C_FLAGS']
listAsimCompilerDirectivs = [] + Env['A_FLAGS']

# compilation defines (-D_)
listCompilationDefines = [] + Env['PUBLIC_DEF'] # add "+ ['D_RTOSAL_VECT_TABLE']" when using vector table

# include paths
Env['PUBLIC_INC'] += [
  os.path.join(Env['ROOT_DIR'], strRtosAlBase, 'api_inc'),
  os.path.join(Env['ROOT_DIR'], strRtosAlBase, 'config', Env['TARGET_BOARD'] ),
]

listIncPaths =  [
  os.path.join(Env['ROOT_DIR'], strRtosAlBase, 'loc_inc'),
] + Env['PUBLIC_INC']
                  

# linker flags
Env['LINKFLAGS'] += []

if not Env["Scan"]:
  # for objects
  listObjects = []
  for tplFile in listCFiles:
    listObjects.append(Env.Object(source=os.path.join(Env['ROOT_DIR'], tplFile[0]), target=tplFile[1], CPPPATH=listIncPaths, CCFLAGS=listCCompilerDirectivs, CPPDEFINES=listCompilationDefines))

  # asm file objects
  for tplFile in listAssemblyFiles:
    listObjects.append(Env.Object(source=os.path.join(Env['ROOT_DIR'], tplFile[0]), target=tplFile[1], CPPPATH=listIncPaths, CCFLAGS=listAsimCompilerDirectivs, CPPDEFINES=listCompilationDefines))

  # for libraries
  objRtosalLib = Env.Library (target=os.path.join(Env['OUT_DIR_PATH'], 'libs', 'rtosal.a'), source=listObjects)

  #print Env.Dump()

  # return the rtosal lib
  Return('objRtosalLib')
