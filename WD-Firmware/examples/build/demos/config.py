import os
import importlib

class clsGenerate(object):
  def __init__(self):
    self.strDemo = ""
    self.listDemos = []
    self.intDemo = -1
    #print  ""strDemo"""
    #add K.G. dont dont dont 
    
  def setDemo(self):
    self.getConfigure()
    self.fnParseConfig()
    # if somehow the demo has not been set correctl break the build
    if not self.strDemo:
      print "No demo has been selected!"
      print "Please run the config.sh from the buil folder."
      exit(1)
    print "Settin Demo to => %s." % self.strDemo
    # import the demo class accordig to the configure 
    strModuleName = "demos.demo_" + self.strDemo
    mdlDemo = importlib.import_module(strModuleName)
    objClass = getattr(mdlDemo, "demo")
    return mdlDemo.demo()
    
  def fnParseConfig(self):
    listLines = self.strDemo.split("\n")
    for strLine in listLines:
      if strLine.strip().startswith("#"):
        continue
      else:
        self.strDemo = strLine
        break
    
  def getConfigure(self):
    # if he configure file does not exist break the build
    if not os.path.isfile("configure.txt"):
      print "No configure file has been found!"
      print "Please run the config.sh from the build folder."
      exit(1)
    # read the configure file from he build folder and grab its info
    f = open("configure.txt", "r")
    self.strDemo = f.read()
    f.close()
    
  def scanDemos(self):
    # scan the build/demo folder and grab all the files with pattern "demo_xxxx.py
    listFiles = os.listdir(os.path.join(os.getcwd(), "demos"))
    for strFile in listFiles:
      if strFile.startswith("demo_") and strFile.endswith(".py"):
        self.listDemos.append(strFile) 
        
  def pickDemo(self):
    # list all the demos found in the build/demos folder and wait for the user to pick one
    for strFile in self.listDemos:
      strDemoName = strFile.replace("demo_", "").replace(".py", "")
      print "%s: %s" % (self.listDemos.index(strFile), strDemoName)
    
    while(True):
      strDemo = raw_input("Please select a demo:")
      if not strDemo.isdigit():
        print "Please enter the demo index!"
      elif int(strDemo) > (len(self.listDemos) - 1):
        print "Demo index out of range!"
      else:
        self.intDemo = int(strDemo)
        break
    
  def setConfig(self):
    # save the configureation in the configure file in the build folder
    self.scanDemos()
    self.pickDemo()
    strHeader =   "##### This file is auto-generated by the build system. #####\n"
    strHeader += "#####                Please dont edit it manually.              #####\n"
    strDemoName = self.listDemos[self.intDemo].replace("demo_", "").replace(".py", "")
    f  = open("configure.txt", "w")
    f.write(strHeader + strDemoName)
    f.close()

if __name__ == "__main__":
  objConfigure= generate()
  objConfigure.setConfig()