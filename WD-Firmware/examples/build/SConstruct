'''
 SPDX-License-Identifier: Apache-2.0
 Copyright 2019 Western Digital Corporation or its affiliates.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
 http:www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
'''
# set imports and variables of sconstruct
import sys
import os
import time
import platform

root_dir = os.path.join(os.getcwd(),"..", "..")
 
# this function creates a header string
def header_create(str_arr):
   header = '\n _______________________________________\n'
   for line in str_arr:
      header += '\n\t' + line
   header += '\n _______________________________________\n'
   return header

# add 'size' util output to the map file
def produce_sections_size(target, source, env):
   global map_file_name
   text = 'Sections size summary'
   # check if there was any change in the .map file
   if not text in open(map_file_name).read():
      # .map was updated so add the sections size
      elf_name = str(source[0])
      size_util_name = os.path.join(Env['TOOLS_BASE_DIR'], 'riscv64-unknown-elf-size')
      headere = header_create([text])
      os.system('echo "' + headere + '" >> ' + map_file_name)
      os.system(size_util_name + ' ' + elf_name + ' >> ' + map_file_name) 
   return None

tc_root_env_var_name = 'RISCV_TC_ROOT'
tc_root_path = os.getenv(tc_root_env_var_name)
# check if the TC environment variable is set or empty
if tc_root_path == '' or tc_root_path == None:
  print ("Set environment variable '" + tc_root_env_var_name + "' to point to the RISCV toolchain root")
  exit(1)

# under linux, verify installation dependencies
if platform.uname()[0] == 'Linux':
   dependency_list = ['libftdi1-2',]
   for dependency in dependency_list:
      os.system('dpkg -s '+ dependency +' > tmp.txt 2>&1')
      if 'not installed' in open('tmp.txt').read():
         print("please install missing library - " + dependency)
         os.system('rm tmp.txt')
         exit(1)
   os.system('rm tmp.txt')
else: 
   # currently only linux is supported 
   print("unsupported environment, please switch to a linux based machine")
   exit(1)

#### scons custom arguments ####
tagretName = ARGUMENTS.get('target', '')
exampleName = ARGUMENTS.get('example', '')
#downloadFlag = ARGUMENTS.get('download', '0')

#from EnvSnap import *
#from saba_pkgScons.mdlSconsUtils import *
# set global environment

# path to scons toolchain scripts
Env = Environment(toolpath = ['toolchain'])

#def download(target, source, env):
#   print repr(source)
#   return None

#Env['BUILDERS']['Download'] = Builder(action = download)

# path to the RV toolchain 'bin' directory
Env['TOOLS_BASE_DIR'] = os.path.join(tc_root_path, 'bin')

# Tool c compiler execution
Env['CC_BIN'] = "riscv64-unknown-elf-gcc"
# Tool assembler compiler execution
Env['AS_BIN'] = "riscv64-unknown-elf-gcc"
# Tool archiver execution
Env['AR_BIN'] = "riscv64-unknown-elf-ar"
# Tool archiver execution
Env['RANLIB_BIN'] = "riscv64-unknown-elf-ranlib"

Env.Tool('as_rv')
Env.Tool('cc_rv')
Env.Tool('ar_rv')

#### scons verbose #####
verbose = True

# set output file suffixes
Env['OBJSUFFIX'] = '.o'
Env['LIBSUFFIX'] = '.a'
Env['PROGSUFFIX'] = '.elf'

Env['ROOT_DIR']        = root_dir
Env['BSP_DEF']         = []
Env['RTOSAL_DEF']      = []
Env['RTOSAL_INC_PATH'] = []
Env['RTOS_INC_PATH']   = []
Env['BSP_INC_PATH']    = []
Env['TARGET_LIBS']     = []
Env['RTOS_CORE']       = []
Env['PUBLIC_INC_PATH'] = []
Env['PUBLIC_DEF']      = [] 
Env['OUT_DIR_PATH']    = 'output'
Env['TARGET_BOARD']    = tagretName
Env['EXAMPLE_NAME']    = exampleName
out_file_name = Env['TARGET_BOARD']+'-'+ exampleName 
map_file_name = os.path.join(Env['OUT_DIR_PATH'], out_file_name) + '.map'
elf_file_name = os.path.join(Env['OUT_DIR_PATH'], out_file_name) + '.elf'

cc_options = ['-mabi=ilp32', '-g3', '-gdwarf-2', '-march=rv32imac', '-mcmodel=medany']
Env['C_FLAGS'] = ['-Os', '-ffunction-sections','-fdata-sections','-Wall','-c','-fno-builtin-printf','-include', 'sys/cdefs.h'] + cc_options
Env['A_FLAGS'] = ['-Wall', '-c', '-Wa,-march=rv32imac', '-x', 'assembler-with-cpp'] + cc_options

if verbose == False:
  # set output to minimal mode
  Env['CCCOMSTR'] = 'Compiling $SOURCES'
  Env['LINKCOMSTR'] = 'Linking $TARGET'
  Env['ASCOMSTR'] = 'Compiling $SOURCES'
  Env['ARCOMSTR'] = 'Archiving $TARGET'

# to solve long command line problems (in win32)
#SetupSpawn(Env)

# for debug
#print Env.Dump()

if not os.path.exists(Env['OUT_DIR_PATH']):
    os.makedirs(Env['OUT_DIR_PATH'])

# linker flags
Env['LINKFLAGS'] = ['-nostartfiles', '-static', '-nostdlib',  '-Wl,--wrap=malloc', '-Wl,--wrap=free', '-Wl,--wrap=open', '-Wl,--wrap=lseek', 
                    '-Wl,--wrap=read', '-Wl,--wrap=write', '-Wl,--wrap=fstat', '-Wl,--wrap=stat', '-Wl,--wrap=close', 
                    '-Wl,--wrap=link', '-Wl,--wrap=unlink', '-Wl,--wrap=execve', '-Wl,--wrap=fork', '-Wl,--wrap=getpid', '-Wl,--wrap=kill', 
                    '-Wl,--wrap=wait', '-Wl,--wrap=isatty',  '-Wl,--wrap=times', '-Wl,--wrap=sbrk', '-Wl,--wrap=_exit', '-L.', 
                    '-Wl,--start-group', '-Wl,--end-group', '-Wl,-gc-sections', '-Wl,--start-group',
                    '-Wl,-Map='+ map_file_name] + cc_options

#, LIBPATH='.'

if Env['TARGET_BOARD'] != 'hifive1' and Env['TARGET_BOARD'] != 'hifive-un':
  print "missing target=[hifive1 | hifive-un]"
  exit(1)

size = Builder(action = produce_sections_size)
Env['BUILDERS']['Size'] = size

arr_lib              = []
if exampleName == 'ex-freertos':
  Env['RTOS_CORE'] = 'freertos'
  Env['PUBLIC_DEF']= ['D_USE_RTOSAL'] 
  arr_lib.append(SConscript('SConscript_bsp_'+ Env['TARGET_BOARD'], exports='Env'))
  arr_lib.append(SConscript('SConscript_'+ Env['RTOS_CORE'], exports='Env'))
  arr_lib.append(SConscript('SConscript_rtosal', exports='Env'))
  arr_lib.append(SConscript('SConscript_psp', exports='Env'))
  Env['TARGET_LIBS'] += ['c', 'gcc']
elif exampleName == 'ex-comrv-baremetal':
  Env['PUBLIC_DEF'] = ['D_BARE_METAL'] 
  arr_lib.append(SConscript('SConscript_bsp_'+ Env['TARGET_BOARD'], exports='Env'))
  arr_lib.append(SConscript('SConscript_psp', exports='Env'))
  arr_lib.append(SConscript('SConscript_comrv_baremetal', exports='Env'))
  Env['TARGET_LIBS'] += ['c', 'gcc']
else:
  print "missing example=[ex-freertos | ex-comrv_baremetal | TBD]"
  exit(1)

arr_lib.append(SConscript('SConscript_example', exports='Env'))
example_bundle = Env.Program(elf_file_name, arr_lib, LIBS=Env['TARGET_LIBS'])
Env.Size(source=example_bundle)

#append to the map file the   
#if downloadFlag != '0':
#  Env.Download(source=example_bundle)
