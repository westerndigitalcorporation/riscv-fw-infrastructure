'''
 SPDX-License-Identifier: Apache-2.0
 Copyright 2019 Western Digital Corporation or its affiliates.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
 http:www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
'''
import os
Import('Env')

out_dir = os.path.join(Env['OUT_DIR_PATH'], 'freertos')
if not os.path.exists(out_dir):
    os.makedirs(out_dir)

rtos_base=os.path.join('rtos', 'rtos_core', 'freertos', 'Source')
list_port_files_c = {
  'hifive1' :  [[os.path.join(rtos_base, 'portable', 'GCC', 'RISCV', 'port.c'), os.path.join(out_dir, 'port.o')],],
  'hifive-un'  :  [],
}

list_port_files_a = {
  'hifive1' :  [[os.path.join(rtos_base, 'portable', 'GCC', 'RISCV', 'portasm.S'), os.path.join(out_dir, 'portasm.o')],],
  'hifive-un'  :  [],
}

list_files_c=[
   [os.path.join(rtos_base, 'croutine.c'), os.path.join(out_dir, 'croutine.o')],
   [os.path.join(rtos_base, 'list.c'), os.path.join(out_dir, 'list.o')],
   [os.path.join(rtos_base, 'queue.c'), os.path.join(out_dir, 'queue.o')],
   [os.path.join(rtos_base, 'tasks.c'), os.path.join(out_dir, 'tasks.o')],
   [os.path.join(rtos_base, 'timers.c'), os.path.join(out_dir, 'timers.o')],
   #[os.path.join(rtos_base, 'portable', 'MemMang', 'heap_4.c'), os.path.join(out_dir, 'heap_4.o')],
] + list_port_files_c[Env['TARGET_BOARD']]

list_port_include_paths={
    'hifive1' : [os.path.join(Env['ROOT_DIR'], rtos_base, 'portable', 'GCC', 'RISCV'),
                 os.path.join(Env['ROOT_DIR'], 'board', 'hifive-1')],
    'hifive-un' : [],
}

# compiler flags
c_flags = [] + Env['C_FLAGS']
a_flags = [] + Env['A_FLAGS']

# defines
c_defines = Env['RTOSAL_DEF'] + Env['BSP_DEF'] + Env['PUBLIC_DEF']

# include paths
Env['RTOS_INC_PATH'] = [
  os.path.join(Env['ROOT_DIR'], rtos_base, 'include'),
  os.path.join(Env['ROOT_DIR'], 'rtos', 'rtos_core', 'freertos', 'Demo', 'common', 'include'),
] + list_port_include_paths[Env['TARGET_BOARD']]
include_paths = Env['BSP_INC_PATH'] + Env['RTOS_INC_PATH']

# linker flags
Env['LINKFLAGS'] += []

# for objects
objects = []
for list_file in list_files_c:
  objects.append(Env.Object(source=os.path.join(Env['ROOT_DIR'], list_file[0]), target=list_file[1], CPPPATH=include_paths, CCFLAGS=c_flags, CPPDEFINES=c_defines))

for list_file in list_port_files_a[Env['TARGET_BOARD']]:
  objects.append(Env.Object(source=os.path.join(Env['ROOT_DIR'], list_file[0]), target=list_file[1], CPPPATH=include_paths, CCFLAGS=a_flags, CPPDEFINES=c_defines))

# for libraries
freertos_lib = Env.Library (target=os.path.join(Env['OUT_DIR_PATH'], 'libs', 'freertos.a'), source=objects)

# return the freertos lib
Return('freertos_lib')
