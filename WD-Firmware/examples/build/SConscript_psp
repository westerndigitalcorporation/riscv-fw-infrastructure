'''
 SPDX-License-Identifier: Apache-2.0
 Copyright 2019 Western Digital Corporation or its affiliates.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
 http:www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
'''
import os
import utils
Import('Env')

out_dir = os.path.join(Env['OUT_DIR_PATH'], 'psp')
utils.fnCreateFolder(out_dir)

# C language source and out files in list of lists
# [sourcefile.c, outputfile.o]
list_files_c=[
   [os.path.join('psp', 'src', 'psp_interrupts.c'), os.path.join(out_dir, 'psp_interrupts.o')],
   [os.path.join('psp', 'src', 'psp_traps.c'), os.path.join(out_dir, 'psp_traps.o')],
   [os.path.join('psp', 'src', 'psp_timer.c'), os.path.join(out_dir, 'psp_timer.o')],
]

# Assembly language source and out files in list of lists
# [sourcefile.S, outputfile.o]
list_files_a=[
   [os.path.join('psp', 'src', 'psp_int_vect.S'), os.path.join(out_dir, 'psp_int_vect.o')],
]

# compiler directivs
c_compiler_directives = [] + Env['C_FLAGS']
a_compiler_directives = [] + Env['A_FLAGS']

# defines
c_defines = []+Env['PUBLIC_DEF']

# public includes
Env['PUBLIC_INC'] += [
  os.path.join(Env['ROOT_DIR'], 'psp', 'api_inc'),
]

# privte includes
include_paths = [ ] + Env['PUBLIC_INC']

if not Env["Scan"]:
  # for objects
  objects = []
  for list_file in list_files_c:
    objects.append(Env.Object(source=os.path.join(Env['ROOT_DIR'], list_file[0]), target=list_file[1], CPPPATH=include_paths, CCFLAGS=c_compiler_directives, CPPDEFINES=c_defines))

  # asm file objects
  for list_file in list_files_a:
    objects.append(Env.Object(source=os.path.join(Env['ROOT_DIR'], list_file[0]), target=list_file[1], CPPPATH=include_paths, CCFLAGS=a_compiler_directives, CPPDEFINES=c_defines))

  # for libraries
  psp_lib = Env.Library (target=os.path.join(Env['OUT_DIR_PATH'], 'libs', 'psp.a'), source=objects)

  # return the psp lib
  Return('psp_lib')
